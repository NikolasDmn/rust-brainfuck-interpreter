fn interpret(c: &Vec<char>) {let mut t = [0; 30000];
let mut l: Vec<usize> = vec![];let mut i = 0;let mut p = 0;
while i < c.len(){match c[i] {'[' =>l.push(i - 1),']' =>
{if t[p] != 0 {i = l.pop().unwrap();}}'+' => t[p] += 1,
'-' => t[p]
 -= 1,'>'
=> {p += 1;}
'<' => p 
-= 1,'.'=>
print!(
"{}",from_u32
(t[p]as u32)
.unwrap()),',' => {let mut input:[u8; 1]
= [0; 1];std::io::stdin().read_exact
(&mut input)
.expect
("failed 
to read 
stdin")
;t[p]
 = input
 [0];}
 _ => {}}
 i += 1}}
